Comprehensive outline of the **AutoTune Software Program** database structure, including the SQL code for creating each table. This outline details how the tables connect to each other and their potential integration with front-end files.

### Comprehensive Database Outline for AutoTune Software Program

#### 1. **Database Schema: AutoTuneDB**
   - **Purpose**: Central database for managing user and vehicle information, service history, diagnostics, and application features.

#### 2. **Tables Overview**
   
| Table Name               | Description                                                                                     |
|--------------------------|-------------------------------------------------------------------------------------------------|
| UserProfiles             | Stores user authentication details and profile information.                                    |
| VehicleInformation       | Contains information about each user's vehicles.                                              |
| ServiceMaintenance       | Logs service records and maintenance history for vehicles.                                     |
| DiagnosticsTuning        | Stores diagnostic data and tuning parameters for vehicles.                                     |
| ProductFeatures          | Contains metadata about available product features and their statuses.                         |
| Roles                    | Defines roles for users (e.g., admin, standard user) for access control.                      |
| UserRoles                | Maps users to their respective roles.                                                          |
| AuditLogs                | Tracks user actions and system activities for monitoring.                                      |
| AuthTokens               | Manages session tokens for user authentication.                                               |
| UserSettings             | Stores user-specific settings and preferences.                                                |
| Notifications            | Manages notifications for users, such as reminders for services or product updates.            |
| Payments                 | Handles payment transactions for services and product features.                                |
| ServiceReminders         | Stores reminders for upcoming vehicle services based on maintenance schedules.                 |

#### 3. **Table Structures and Relationships**

1. **UserProfiles Table**
   ```sql
   CREATE TABLE UserProfiles (
       UserID INT AUTO_INCREMENT PRIMARY KEY,
       Username VARCHAR(255) NOT NULL,
       Password VARCHAR(255) NOT NULL, -- Consider hashing for security
       Email VARCHAR(255),
       PhoneNumber VARCHAR(20),
       Address VARCHAR(255),
       RegistrationDate DATETIME DEFAULT NOW(),
       LastLoginDate DATETIME
   );
   ```
   - **Primary Key**: `UserID`
   - **Connected To**:
     - `VehicleInformation` (one-to-many)
     - `ServiceMaintenance` (one-to-many)
     - `DiagnosticsTuning` (one-to-many)
     - `UserRoles` (one-to-many)
     - `AuditLogs` (one-to-many)
     - `AuthTokens` (one-to-many)
     - `UserSettings` (one-to-one)
     - `Notifications` (one-to-many)
     - `Payments` (one-to-many)

2. **VehicleInformation Table**
   ```sql
   CREATE TABLE VehicleInformation (
       VehicleID INT AUTO_INCREMENT PRIMARY KEY,
       UserID INT, -- Foreign Key
       Make VARCHAR(50),
       Model VARCHAR(50),
       Year INT,
       VIN VARCHAR(50),
       Mileage INT,
       FuelConsumption DECIMAL(10, 2),
       FOREIGN KEY (UserID) REFERENCES UserProfiles(UserID) ON DELETE CASCADE
   );
   ```
   - **Primary Key**: `VehicleID`
   - **Connected To**:
     - `ServiceMaintenance` (one-to-many)
     - `DiagnosticsTuning` (one-to-many)
     - `ServiceReminders` (one-to-many)

3. **ServiceMaintenance Table**
   ```sql
   CREATE TABLE ServiceMaintenance (
       ServiceID INT AUTO_INCREMENT PRIMARY KEY,
       VehicleID INT, -- Foreign Key
       ServiceType VARCHAR(100),
       ServiceProvider VARCHAR(255),
       ServiceDate DATETIME,
       Cost DECIMAL(10, 2),
       NextMaintenanceDate DATETIME,
       FOREIGN KEY (VehicleID) REFERENCES VehicleInformation(VehicleID) ON DELETE CASCADE
   );
   ```
   - **Primary Key**: `ServiceID`
   - **Connected To**:
     - `VehicleInformation` (many-to-one)

4. **DiagnosticsTuning Table**
   ```sql
   CREATE TABLE DiagnosticsTuning (
       DiagnosticID INT AUTO_INCREMENT PRIMARY KEY,
       VehicleID INT, -- Foreign Key
       DiagnosticData TEXT,
       TuningParameters TEXT,
       Date DATETIME DEFAULT NOW(),
       FOREIGN KEY (VehicleID) REFERENCES VehicleInformation(VehicleID) ON DELETE CASCADE
   );
   ```
   - **Primary Key**: `DiagnosticID`
   - **Connected To**:
     - `VehicleInformation` (many-to-one)

5. **ProductFeatures Table**
   ```sql
   CREATE TABLE ProductFeatures (
       FeatureID INT AUTO_INCREMENT PRIMARY KEY,
       FeatureName VARCHAR(255),
       Description TEXT,
       FeatureStatus ENUM('Active', 'Inactive'),
       Pricing DECIMAL(10, 2)
   );
   ```
   - **Primary Key**: `FeatureID`
   - **Connected To**: None

6. **Roles Table**
   ```sql
   CREATE TABLE Roles (
       RoleID INT AUTO_INCREMENT PRIMARY KEY,
       RoleDescription VARCHAR(255)
   );
   ```
   - **Primary Key**: `RoleID`
   - **Connected To**:
     - `UserRoles` (one-to-many)

7. **UserRoles Table**
   ```sql
   CREATE TABLE UserRoles (
       UserRoleID INT AUTO_INCREMENT PRIMARY KEY,
       UserID INT, -- Foreign Key
       RoleID INT, -- Foreign Key
       FOREIGN KEY (UserID) REFERENCES UserProfiles(UserID) ON DELETE CASCADE,
       FOREIGN KEY (RoleID) REFERENCES Roles(RoleID) ON DELETE CASCADE
   );
   ```
   - **Primary Key**: `UserRoleID`
   - **Connected To**:
     - `UserProfiles` (many-to-one)
     - `Roles` (many-to-one)

8. **AuditLogs Table**
   ```sql
   CREATE TABLE AuditLogs (
       LogID INT AUTO_INCREMENT PRIMARY KEY,
       UserID INT, -- Foreign Key
       ActionTaken VARCHAR(255),
       Timestamp DATETIME DEFAULT NOW(),
       Status ENUM('Success', 'Failure'),
       FOREIGN KEY (UserID) REFERENCES UserProfiles(UserID) ON DELETE CASCADE
   );
   ```
   - **Primary Key**: `LogID`
   - **Connected To**:
     - `UserProfiles` (many-to-one)

9. **AuthTokens Table**
   ```sql
   CREATE TABLE AuthTokens (
       TokenID INT AUTO_INCREMENT PRIMARY KEY,
       UserID INT, -- Foreign Key
       Token VARCHAR(255),
       ExpiryDate DATETIME,
       FOREIGN KEY (UserID) REFERENCES UserProfiles(UserID) ON DELETE CASCADE
   );
   ```
   - **Primary Key**: `TokenID`
   - **Connected To**:
     - `UserProfiles` (many-to-one)

10. **UserSettings Table**
    ```sql
    CREATE TABLE UserSettings (
        SettingID INT AUTO_INCREMENT PRIMARY KEY,
        UserID INT, -- Foreign Key
        SettingName VARCHAR(255),
        SettingValue VARCHAR(255),
        FOREIGN KEY (UserID) REFERENCES UserProfiles(UserID) ON DELETE CASCADE
    );
    ```
    - **Primary Key**: `SettingID`
    - **Connected To**:
      - `UserProfiles` (one-to-one)

11. **Notifications Table**
    ```sql
    CREATE TABLE Notifications (
        NotificationID INT AUTO_INCREMENT PRIMARY KEY,
        UserID INT, -- Foreign Key
        NotificationContent TEXT,
        CreatedAt DATETIME DEFAULT NOW(),
        ReadStatus ENUM('Read', 'Unread'),
        FOREIGN KEY (UserID) REFERENCES UserProfiles(UserID) ON DELETE CASCADE
    );
    ```
    - **Primary Key**: `NotificationID`
    - **Connected To**:
      - `UserProfiles` (many-to-one)

12. **Payments Table**
    ```sql
    CREATE TABLE Payments (
        PaymentID INT AUTO_INCREMENT PRIMARY KEY,
        UserID INT, -- Foreign Key
        Amount DECIMAL(10, 2),
        PaymentDate DATETIME DEFAULT NOW(),
        PaymentMethod ENUM('Credit Card', 'Debit Card', 'PayPal'),
        TransactionStatus ENUM('Success', 'Failed'),
        FOREIGN KEY (UserID) REFERENCES UserProfiles(UserID) ON DELETE CASCADE
    );
    ```
    - **Primary Key**: `PaymentID`
    - **Connected To**:
      - `UserProfiles` (many-to-one)

13. **ServiceReminders Table**
    ```sql
    CREATE TABLE ServiceReminders (
        ReminderID INT AUTO_INCREMENT PRIMARY KEY,
        VehicleID INT, -- Foreign Key
        ReminderDate DATETIME,
        ServiceType VARCHAR(100),
        FOREIGN KEY (VehicleID) REFERENCES VehicleInformation(VehicleID) ON DELETE CASCADE
    );
    ```
    - **Primary Key**: `ReminderID`
    - **Connected To**:
      - `VehicleInformation` (many-to-one)

#### 4. **Frontend Integration**
   - **HTML Files**: The front-end pages (like the sign-in page and dashboard) will interact with the database via a back-end application (such as a Node.js server, PHP, or Python Flask).
   - **Sign-In Page (`sign_in.html`)**:
     - Inputs for `Email` and `Password` connect to the **UserProfiles** table to authenticate users.
     - If successful, redirect users to their dashboard and establish a session using **AuthTokens**.
   - **Dashboard Page (`home.html`)**:
     - Retrieves and displays data from **UserProfiles**, **VehicleInformation**, and **ServiceMaintenance** tables.
     - Allows users to add, update, or delete vehicles and maintenance records.
   - **Service Reminder Notifications**:
     - Integration with the **Notifications** table to display alerts about upcoming service appointments.
   - **Payment Handling**:
     - Connects to the **Payments** table for processing transactions related to premium features or services

.

#### 5. **Potential Technologies for Integration**
   - **Back-End Framework**: Node.js, PHP, Python Flask, or Django to create APIs that interact with the MySQL database.
   - **Frontend Framework**: React, Angular, or Vue.js to build a dynamic user interface that communicates with the backend.
   - **Authentication**: JWT (JSON Web Tokens) or session cookies for managing user sessions using the **AuthTokens** table.

### Summary
This comprehensive outline presents the full structure of the AutoTune database, including the SQL code for creating each table, highlighting how each table interrelates and how they connect to your front-end implementation. It provides a clear roadmap for managing user and vehicle data, service records, and overall application functionality.

